unit cAtualizacaoBancoDeDados;
interface

uses system.Classes, vcl.Controls,vcl.ExtCtrls, vcl.Dialogs, ZAbstractConnection, ZConnection, ZAbstractRODataset,
ZAbstractDataset, Zdataset, System.SysUtils;

type
TatualizaBancoDados = class
private
ConectDb:TZConnection;

public
Constructor Create(aConexao:TZConnection);
procedure ExecutaDiretoBancoDeDados(aScript: String);
end;

type
  TAtualizaBancoDadosMSSQL = Class

  private
  public

  ConectDB:TZConnection;
  function AtualiazarBancoDeDadosMSSQL: Boolean;
  constructor Create(aConexao: TZConnection);
End;


type
  TAtualizacaoTableMSSQL = class(TAtualizaBancoDados)
private
  function TabelaExiste(aNomeTabela:String):Boolean;
  procedure Categoria;

  protected

  public
  constructor Create(aConexao:TZConnection);
  destructor Destroy; override;
  end;


implementation

{ TatualizaBancoDados }

constructor TatualizaBancoDados.Create(aConexao: TZConnection);
begin
 conectDb:=aConexao;
end;

procedure TatualizaBancoDados.ExecutaDiretoBancoDeDados(aScript: String);
var qry:tzQuery;
begin
try
  qry:=TZQuery.Create(nil);
  qry.Connection:=conectdb;
  qry.SQL.Clear;
  qry.SQL.Add(ascript);
  try
     ConectDB.StartTransaction;
     qry.ExecSQL;
     conectDb.Commit;
  except
     ConectDB.RollBack;
  end;
finally
  qry.Close;
  if Assigned(qry) then
  FreeAndNil(qry);
end;

end;

{ TAtualizaBancoDadosMSSQL }

function TAtualizaBancoDadosMSSQL.AtualiazarBancoDeDadosMSSQL: Boolean;
var oAtualizarDB:TAtualizaBancoDados;
begin
  try
    oatualizarDb:=TAtualizaBancoDados.Create(conectDb);
  finally
  if assigned(oatualizarDB) then
     freeandNil(oAtualizarDB);
  end;
end;

constructor TAtualizaBancoDadosMSSQL.Create(aConexao: TZConnection);
begin
  conectDb:=aConexao;
end;


{ TAtualizacaoTableMSSQL }

constructor TAtualizacaoTableMSSQL.Create(aConexao: TZConnection);
begin
  conectDB := aConexao;
  categoria;
end;

destructor TAtualizacaoTableMSSQL.Destroy;
begin

  inherited;
end;

function TAtualizacaoTableMSSQL.TabelaExiste(aNomeTabela: String): Boolean;
var qry:TZQuery;
begin
    try
      Result:=False;
      Qry:=TZQuery.Create(nil);
      qry.SQL.Add(' SELECT OBJECT_ID (:NomeTabela) AS ID ');
      qry.ParamByName('NomeTabela').AsString:=aNomeTabela;
      qry.Open;

      if Qry.FieldByName('ID').AsInteger>0 then
        Result:=True;

      Finally
      qry.Close;
      if Assigned(qry) then
        FreeAndNil(qry);
    end;
end;

procedure TAtualizacaoTableMSSQL.Categoria;
begin
  if not tabelaExiste('categorias') then
  begin
     ExecutaDiretoBancoDeDados(

  '  CREATE TABLE categorias (  '+
  '  categoriaId int IDENTITY(1,1) NOT NULL,  '+
  '  descricao varchar(30) NULL,  '+
  '  PRIMARY KEY (categoriaId)   ' +
   ') '
        );


  end;
 end;
end.
