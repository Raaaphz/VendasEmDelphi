unit cCadProduto;

interface

uses System.Classes,
     Vcl.Controls,
     Vcl.ExtCtrls,
     Vcl.Dialogs,
     ZAbstractConnection,
     ZConnection,
     ZAbstractRodataset,
     ZAbstractDataSet,
     ZDataset,
     System.SysUtils;

type
  TProduto = class
  private
    ConectDB:TZConnection;
    F_produtoId:Integer;
    F_nome:String;
    F_descricao: string;
    F_valor:Double;
    F_quantidade: Double;
    F_categoriaId: Integer;

  public
    constructor Create(aConexao:TZCOnnection);
    destructor Destroy; override;
    function Gravar:Boolean;
    function Atualizar:Boolean;
    function Selecionar(id:Integer):Boolean;
    function Apagar:Boolean;

    published
      property codigo:Integer read F_produtoId write F_produtoId;
      property nome:string read F_nome write F_nome;
      property descricao:string read F_descricao write F_descricao;
      property valor:double read F_valor write F_valor;
      property quantidade:double read F_quantidade write F_quantidade;
      property categoriaId:Integer read F_categoriaId write F_categoriaId;
  end;

implementation

constructor Tproduto.Create(aConexao: TZConnection);
begin
  conectDB:=aConexao;
end;

destructor Tproduto.Destroy;
begin

  inherited;
end;

function TProduto.Apagar:Boolean;
var qry:TZQuery;
begin
  if MessageDlg('Apagar o registro: '+#13+#13+
  'Código: '+IntToStr(F_produtoId)+#13+
  'Descrição: '+F_nome, mtConfirmation, [mbYes, mbNo], 0)=mrNo then begin
    result:=false;
    abort;
  end;
try
  Result:=True;
  qry:=TZquery.Create(nil);
  qry.Connection:=ConectDB;
  qry.SQL.Clear;
  qry.SQL.Add('DELETE FROM produtos '+
              ' WHERE produtoId=:produtoId ');
  qry.ParamByName('produtoId').AsInteger :=F_produtoId;
  try
    qry.ExecSQL;
  except
    result:=false;
  end;
finally
  if Assigned(qry) then
  FreeAndNil(qry);
end;
end;

end.
